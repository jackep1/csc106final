/***** Bitmoji section *****/

var drawBitmojiHead = function(height, bitmojiX, bitmojiY) {
    noStroke();
    
    //hood
    fill(71, 71, 71);
    ellipse(bitmojiX+height*0.01, bitmojiY+height*0.78, height*1.03, height*0.46);
    
    //neck
    fill(245, 221, 196);
    quad(bitmojiX+height*0.2, bitmojiY+height*0.6, bitmojiX-height*0.2, bitmojiY+height*0.6, bitmojiX-height*0.21, bitmojiY+height*0.72, bitmojiX+height*0.21, bitmojiY+height*0.7);
    
    //dome
    fill(255, 224, 189);
    arc(bitmojiX, bitmojiY-height*0.13, height*1.02, height*0.93, 180, 360);
    
    //cheeks
    quad(bitmojiX-height*0.51, bitmojiY-height*0.13, bitmojiX+height*0.51, bitmojiY-height*0.13, bitmojiX+height*0.44, bitmojiY+height*0.38, bitmojiX-height*0.45, bitmojiY+height*0.38);
    
    //jaw
    quad(bitmojiX+height*0.44, bitmojiY+height*0.37, bitmojiX-height*0.45, bitmojiY+height*0.38, bitmojiX-height*0.29, bitmojiY+height*0.59, bitmojiX+height*0.28, bitmojiY+height*0.59);
    
    //chin
    arc(bitmojiX, bitmojiY+height*0.55, height*0.57, height*0.25, 0, 180);
    
    //ears (left - right)
    ellipse(bitmojiX-height*0.46, bitmojiY+height*0.09, height*0.2, height*0.29);
    ellipse(bitmojiX+height*0.46, bitmojiY+height*0.09, height*0.2, height*0.29);
    
    //hat
    fill(78, 102, 117);
    arc(bitmojiX, bitmojiY-height*0.28, height*0.98, height*0.62, 180, 360);
    
    //hair
    fill(64, 56, 47);
    arc(bitmojiX, bitmojiY-height*0.28, height*0.42, height*0.25, 180, 360);
    triangle(bitmojiX+height*0.37, bitmojiY-height*0.28, bitmojiX+height*0.50, bitmojiY-height*0.1, bitmojiX+height*0.49, bitmojiY-height*0.28);
    triangle(bitmojiX-height*0.49, bitmojiY-height*0.28, bitmojiX-height*0.49, bitmojiY-height*0.1, bitmojiX-height*0.37, bitmojiY-height*0.28);
    
    //eyes (left - right)
    fill(255, 255, 255); //whites
    ellipse(bitmojiX-height*0.22, bitmojiY-height*0.03, height*0.15, height*0.08);
    ellipse(bitmojiX+height*0.22, bitmojiY-height*0.03, height*0.15, height*0.08);
    fill(70, 97, 140); //colors
    ellipse(bitmojiX-height*0.22, bitmojiY-height*0.03, height*0.08, height*0.08);
    ellipse(bitmojiX+height*0.22, bitmojiY-height*0.03, height*0.08, height*0.08);
    fill(0, 0, 0); //pupils
    ellipse(bitmojiX-height*0.22, bitmojiY-height*0.03, height*0.04, height*0.04);
    ellipse(bitmojiX+height*0.22, bitmojiY-height*0.03, height*0.04, height*0.04);
    
    //eyebrows (left-right)
    noFill();
    stroke(64, 56, 47);
    strokeWeight(height*0.02);
    arc(bitmojiX-height*0.22, bitmojiY-height*0.09, height*0.26, height*0.06, 225, 315);
    arc(bitmojiX+height*0.22, bitmojiY-height*0.09, height*0.26, height*0.06, 225, 315);
    
    //nose
    line(bitmojiX+height*0.06, bitmojiY+height*0.2, bitmojiX-height*0.02, bitmojiY+height*0.05);
    noFill();
    arc(bitmojiX+height*0.03, bitmojiY+height*0.2, height*0.06, height*0.03, -5, 120);
    
    //mouth
    fill(255, 255, 255);
    strokeWeight(height*0.005);
    arc(bitmojiX, bitmojiY+height*0.41, height*0.37, height*0.19, -5, 185);
};

var drawBitmojiBody = function(height, bitmojiX, bitmojiY) {
    //shirt
    fill(71, 71, 71);
    noStroke();
    rectMode(CENTER);
    rect(bitmojiX, bitmojiY+height*1.03, height*1.44, height*0.62, height*0.1);
    
    //logo
    noFill();
    strokeWeight(height*0.03);
    stroke(255, 255, 255);
    arc(bitmojiX+height*0.32, bitmojiY+height*0.96, height*0.06, height*0.03, 70, 240);
    strokeWeight(height*0.034);
    line(bitmojiX+height*0.35, bitmojiY+height*0.96, bitmojiX+height*0.43, bitmojiY+height*0.92);
    
    //strings
    strokeWeight(height*0.02);
    stroke(255, 255, 255);
    line(bitmojiX-height*0.13, bitmojiY+height*0.76, bitmojiX-height*0.14, bitmojiY+height*1.02);
    line(bitmojiX+height*0.13, bitmojiY+height*0.76, bitmojiX+height*0.15, bitmojiY+height*1.08);
    
    //lettering
    fill(78, 102, 117);
    textSize(height*0.33);
    text('JP', bitmojiX-height*0.0, bitmojiY+height*1.18);
};

var drawBitmoji = function(height, bitmojiX, bitmojiY) {
    drawBitmojiHead(height, bitmojiX, bitmojiY);
    drawBitmojiBody(height, bitmojiX, bitmojiY);
};

// Set scene variable and determine number of rows and columns
var scene = 0;
var NUM_COLS = 8;
var NUM_ROWS = 7;

//Set game difficulty
var numBombs = 6;

/***** Rocks section *****/

// Defines rock object prototype
var Rock = function(x, y, id) {
    this.x = x;
    this.y = y;
    this.size = 50;
    this.face = getImage("space/0");
    this.isFaceUp = false;
    this.id = id;
    this.minesAround = 0;
};

// Defines rock draw function
Rock.prototype.draw = function() {
    fill(174, 184, 171);
    strokeWeight(2);
    rect(this.x, this.y, this.size, this.size, 10);
    if (this.isFaceUp) {
        image(this.face, this.x, this.y, this.size, this.size);
    } else {
        image(getImage("cute/Rock"), this.x, this.y, this.size, this.size);
    }
};

// Determines if mouse is in the rock
Rock.prototype.isUnderMouse = function(x, y) {
    return x >= this.x && x <= this.x + this.size  &&
        y >= this.y && y <= this.y + this.size;
};

Rock.prototype.raiseMineCount = function() {
    this.minesAround += 1;
};


/***** Button section *****/

// Creates a more general button class
var Button = function(config) {
    this.x = config.x || 130;
    this.y = config.y || 150;
    this.height = config.height || 60;
    this.width = config.width || 140;
    this.color = config.color;
    this.label = config.label;
};

// Defines button draw function
Button.prototype.draw = function() {
    fill(this.color);
    rect(this.x, this.y, this.width, this.height);
    fill(0, 0, 0);
    textAlign(CENTER, CENTER);
    textSize(25);
    text(this.label, this.x + this.width/2, this.y + this.height/2);
};

// Determines if mouse is in button
Button.prototype.isMouseIn = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

// Creates a start button
var startButton = new Button({
    color: color(67, 105, 75),
    label: "START"
});

/***** Global configuration section *****/

//Assign the bomb to a variable
var mrPinkImg = getImage("avatars/mr-pink");

// Declare an array of all results when rocks are dug
var possibleFaces = [
    getImage("space/0"),
    getImage("space/1"),
    getImage("space/2"),
    getImage("space/3"),
    getImage("space/4"),
    getImage("space/5"),
    getImage("space/6"),
    getImage("space/7"),
    getImage("space/8"),
    mrPinkImg
];

// Create the rocks
var rocks = [];
for (var i = 0; i < NUM_ROWS; i++) {
    for (var j = 0; j < NUM_COLS; j++) {
        var rockX = j * 50;
        var rockY = i * 50 + 50;
        var rockId = (j+1) + (i*8);
        rocks.push(new Rock(rockX, rockY, rockId));
    }
}

// Assigns bombs to random rocks
for (var i = 0; i < numBombs; i++) {
    var randomIndex = floor(random(0, rocks.length));
    var bombRock = rocks[randomIndex];
    bombRock.face = mrPinkImg;
}

// Function to check if a rock's face is the BOMB
var faceIsBomb = function(nearbyRock) {
    if (nearbyRock.face === mrPinkImg) {
        return true;
    } else {
        return false;
    }
};

// Eight functions which check if a rock's area has mines, adds to minesAround if so
var checkUpperLeft = function(rock) {
    if (rock.id % 8 !== 1 && rock.id - 9 > 0) {
        var upperLeftRock = rocks[rock.id - 10];
        if (faceIsBomb(upperLeftRock)) {
            rock.raiseMineCount();
        }
    }
};
var checkUpperMid = function(rock) {
    if (rock.id - 8 > 0) {
        var upperMidRock = rocks[rock.id - 9];
        if (faceIsBomb(upperMidRock)) {
            rock.raiseMineCount();
        }
    }
};
var checkUpperRight = function(rock) {
    if (rock.id % 8 !== 0 && rock.id - 7 > 0) {
        var upperRightRock = rocks[rock.id - 8];
        if (faceIsBomb(upperRightRock)) {
            rock.raiseMineCount();
        }
    }
};
var checkLeftMid = function(rock) {
    if (rock.id % 8 !== 1) {
        var leftMidRock = rocks[rock.id - 2];
        if (faceIsBomb(leftMidRock)) {
            rock.raiseMineCount();
        }
    }
};
var checkRightMid = function(rock) {
    if (rock.id % 8 !== 0) {
        var rightMidRock = rocks[rock.id];
        if (faceIsBomb(rightMidRock)) {
            rock.raiseMineCount();
        }
    }
};
var checkLowerLeft = function(rock) {
    if (rock.id % 8 !== 1 && rock.id + 6 < 56) {
        var lowerLeftRock = rocks[rock.id + 6];
        if (faceIsBomb(lowerLeftRock)) {
            rock.raiseMineCount();
        }
    }
};
var checkLowerMid = function(rock) {
    if (rock.id + 9 < 56) {
        var lowerMidRock = rocks[rock.id + 7];
        if (faceIsBomb(lowerMidRock)) {
            rock.raiseMineCount();
        }
    }
};
var checkLowerRight = function(rock) {
    if (rock.id % 8 !== 0 && rock.id + 7 < 56) {
        var lowerRightRock = rocks[rock.id + 8];
        if (faceIsBomb(lowerRightRock)) {
            rock.raiseMineCount();
        }
    }
};

// Checks each rock's environment for bombs and sets face to number that surround it
for (var i = 0; i < rocks.length; i++) {
    checkUpperLeft(rocks[i]);
    checkUpperMid(rocks[i]);
    checkUpperRight(rocks[i]);
    checkLeftMid(rocks[i]);
    checkRightMid(rocks[i]);
    checkLowerLeft(rocks[i]);
    checkLowerMid(rocks[i]);
    checkLowerRight(rocks[i]);
    if (rocks[i].face !== mrPinkImg) {
        rocks[i].face = possibleFaces[rocks[i].minesAround];
    }
}

// Declares the number of rocks safely cleared
var numTries = 0;

// General mouseClicked function that handles scene changes and clicks on rocks
mouseClicked = function() {
    if (startButton.isMouseIn() && scene === 0) {
        scene = 1;
    } else if (scene === 1) {
        for (var i = 0; i < rocks.length; i++) {
            var rock = rocks[i];
            if (rock.isUnderMouse(mouseX, mouseY)) {
                if (rock.isFaceUp === false) {
                    numTries += 1;
                    rock.isFaceUp = true;
                }
                if (rock.face === mrPinkImg) {
                    scene = 2;
                }
            }
        }
        if (NUM_ROWS * NUM_COLS - numTries === numBombs) {
            scene = 3;
        }
    }
    loop();
};


/***** Setting the scene *****/

// Draws the opening splash screen
var drawStartScene = function() {
    noStroke();
    background(255, 255, 255);
    textSize(50);
    fill(0, 0, 0);
    textAlign(CENTER, CENTER);
    text("Minesweeper", 200, 100);
    rectMode(CORNER);
    startButton.draw();
    drawBitmoji(75, 200, 263);
    textSize(15);
    fill(0, 0, 0);
    text("Jonathan Pincince", 200, 380);
};

// Draws the scene with rocks
var drawGameScene = function() {
    textAlign(LEFT, BOTTOM);
    background(255, 255, 255);
    textSize(20);
    fill(0, 0, 0);
    text("Areas cleared: " + numTries, 15, 35);
    drawBitmoji(20, 373, 18);
    rectMode(CORNER);
    strokeWeight(2);
    
    for (var i = 0; i < rocks.length; i++) {
        rocks[i].draw();
    }
};

//Adds splash screen for when mine is hit
var drawLossScene = function() {
    textSize(20);
    fill(255, 0, 0);
    rect(0, 0, 400, 50);
    fill(255, 255, 0);
    text("You've been blown up!", 15, 35);
    text("Areas cleared: " + numTries, 235, 35);
    
    for (var i = 0; i < rocks.length; i++) {
        rocks[i].draw();
    }
};

//Adds splash screen for when area is safe
var drawWinScene = function() {
    fill(124, 237, 171);
    rect(0, 0, 400, 50);
    fill(0, 0, 0);
    textSize(17);
    text("You cleared the area without", 15, 27);
    text("setting off the mines!", 35, 42);
    text("Areas cleared: " + numTries, 255, 35);
    
    for (var i = 0; i < rocks.length; i++) {
        rocks[i].draw();
    }
};

// Draw function where previous scene drawing functions are called based on scene         variable
draw = function() {
    if (scene === 0) {
        drawStartScene();
    } else if (scene === 1) {
        drawGameScene();
    } else if (scene === 2) {
        drawLossScene();
    } else if (scene === 3) {
        drawWinScene();
    }
};

